**I have a bunch of files in a directory, and I need to insert a line of text into each of them. They have essentially the following format:**
 And I'd like to insert author: Flo before the tags:

 for i in ; do sed -i 's/tags:/author: Flo\ntags:/' "i"; done

**Searches all files in the current directory for "category: linux" which ca be savet to a text file**
grep -iRl "category: linux" ./

**The listoffiles from above can be passed to the mv or cp command**
for file in `cat listoffiles`; do mv "$file" /path/of/destination ; done

**Rename to remove space in file names**
rename "s/ //g"  or rename "s/-- //g" to fill the spaces with -

**Removes space and insert**
If you don't have rename or prefer to use just the shell:

for f in *\ *; do mv "$f" "${f// /-}"; done

Broken down:

 *\ * selects all files with a space in their name as input for the the for loop.
 The quotes around "$f" are important because we know there's a space in the filename and otherwise it would appear as 2+ arguments to mv.
 ${f//str/new_str} is a bash-specific string substitution feature. All instances of str are replaced with new_str.

 *Removes ctl-m*
To get the ^M character, type Control-v and hit Enter
:%s/\r//g
or
%s///gc

**Removes spaces in file names and replaces them with**

for file in *; do mv "$file" `echo $file | sed -e 's/  */-/g' -e 's/_-_/-/g'`; done
or
find . -depth -name '* *' | while IFS= read -r f ; do mv -i "$f" "$(dirname "$f")/$(basename "$f"|tr ' ' _)" ; done
---
date: 2013-07-29
layout: post
title: "Find and Replace"
description: ""
category: tech
tags:
- linux
---


find . -name '*.html' | xargs perl -pi -e 's/oldtext/newtext/g'


\n adds a new line

 finds  any text and replaces it with <!--start excerpt-->


find . -name '*.md' | xargs perl -pi -e 's/any text/<!--start excerpt--> /g'

finds any text and replaces it with a new line and {{ more }}  (\n being new line)


find . -name '*.md' | xargs perl -pi -e 's/any text/\n{{ more }} /g'



find . -type f -print0 | xargs -0 sed -i /KeyWord/d

**Deletes line containing KEYWORD**

First command find finds all the standard files (not directories, or pipes, or etc.), prints them separated by \0 (so filenames can contains spaces, newlines, etc.).

Second command xargs reads the output of find, grabs a list based on a separator (\0 because of -0), invokes sed -i [...] with added parameters from the list (sed will be called multiple times if there are a lot of files, as the maximum length of the parameters is limited in each invocation).

The sed command modifies in-place (-i).

As to /KeyWord/d, it'll delete lines containing the regular expression KeyWord
